#!/bin/bash

set -e

###############################

#Example

# ./build_splunk_cmd.sh --name greetme --desc "Greets the user" --script-file ~/Users/blovley/Desktop/greetme.py

###############################

# greetme.py

#!/usr/bin/env python3

#import sys
#import os
#sys.path.insert(0, os.path.join(os.path.dirname(__file__), "splunklib"))
#
#from splunklib.searchcommands import StreamingCommand, Configuration, Option, dispatch
#
#@Configuration()
#class GreetmeCommand(StreamingCommand):
#    field = Option(require=True)
#
#    def stream(self, records):
#        for record in records:
#            value = record.get(self.field, "")
#            record["greetme"] = f"hello {value}"
#            yield record
#dispatch(GreetmeCommand, sys.argv, sys.stdin, sys.stdout, __name__)

#################################

# Defaults
COMMAND_NAME="helloworld"
DESCRIPTION="Returns a new field that says 'hello <field value>'."
PYTHON_LOGIC='record["helloworld"] = f"hello {value}"'
FLAG_EXAMPLE=false
SCRIPT_FILE=""

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --name) COMMAND_NAME="$2"; shift ;;
        --desc) DESCRIPTION="$2"; shift ;;
        --logic) PYTHON_LOGIC="$2"; shift ;;
        --script-file) SCRIPT_FILE="$2"; shift ;;
        --example) FLAG_EXAMPLE=true ;;
    esac
    shift
done

# Handle --example mode
if [ "$FLAG_EXAMPLE" = true ]; then
    COMMAND_NAME="helloworld"
    DESCRIPTION="Returns a new field that says 'hello <field value>'."
    PYTHON_LOGIC='record["helloworld"] = f"hello {value}"'
    SCRIPT_FILE=""
fi

# Capitalize first letter for class name (Bash 3.2 compatible)
CLASS_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${COMMAND_NAME:0:1})${COMMAND_NAME:1}"

# Setup
APP_DIR="$COMMAND_NAME"
LIB_REPO="https://github.com/benbigbeard/splunklib/archive/refs/heads/main.zip"
mkdir -p "$APP_DIR"/{bin,default,metadata}

# Python script
if [[ -n "$SCRIPT_FILE" && -f "$SCRIPT_FILE" ]]; then
    echo "Copying user-provided script from $SCRIPT_FILE"
    cp "$SCRIPT_FILE" "$APP_DIR/bin/$COMMAND_NAME.py"
else
    cat > "$APP_DIR/bin/$COMMAND_NAME.py" << EOF
#!/usr/bin/env python3

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "splunklib"))

from splunklib.searchcommands import StreamingCommand, Configuration, Option, dispatch

@Configuration()
class ${CLASS_NAME}Command(StreamingCommand):
    field = Option(require=True)

    def stream(self, records):
        for record in records:
            value = record.get(self.field, "")
            $PYTHON_LOGIC
            yield record

dispatch(${CLASS_NAME}Command, sys.argv, sys.stdin, sys.stdout, __name__)
EOF
fi

# Configuration files
cat > "$APP_DIR/default/commands.conf" << EOF
[$COMMAND_NAME]
filename = $COMMAND_NAME.py
chunked = true
supports_getinfo = true
outputheader = true
EOF

COMMAND_NAME_UPPER=$(echo "$COMMAND_NAME" | tr '[:lower:]' '[:upper:]')

cat > "$APP_DIR/default/searchbnf.conf" << EOF
[$COMMAND_NAME-command]
syntax = $COMMAND_NAME_UPPER FIELD=<field>
shortdesc = $DESCRIPTION
description = \\
    This command evaluates the specified field and returns a new field with results based on custom logic. \\
    The behavior is determined by the Python script logic provided in the app.
example1 = \\
    | makeresults | eval input="example" | $COMMAND_NAME field=input
arguments.field = Required. The name of the input field to apply logic to.
category = streaming
usage = public
appears-in = 1.0
maintainer = autogenerated
EOF

cat > "$APP_DIR/default/props.conf" << EOF
[search-commands]
EXTRACT-command = (?i)^\\s*($COMMAND_NAME)\\b
EOF

cat > "$APP_DIR/metadata/default.meta" << EOF
[]
access = read : [ * ], write : [ admin, power ]
export = system

[searchbnf]
export = system
EOF

# splunklib download
echo "Downloading splunklib from GitHub..."
curl -sL "$LIB_REPO" -o /tmp/splunklib_repo.zip
unzip -qo /tmp/splunklib_repo.zip "splunklib-main/splunklib/*" -d /tmp/
mv /tmp/splunklib-main/splunklib "$APP_DIR/bin/"
rm -rf /tmp/splunklib_repo.zip /tmp/splunklib-main

echo "Created Splunk command app '$COMMAND_NAME' (script: ${SCRIPT_FILE:-generated})"