<form>
  <label>Infra assessment</label>
  <init>
    <set token="_internal">(index=_internal)</set>
  </init>
  <search>
    <query>index=_introspection data.search_props.role=head data.search_props.app!=splunk_archiver | stats count by host | fields host  | mvcombine host | nomv host | eval host=REPLACE(host," ", " OR host=")| eval host="host=". host</query>
    <earliest>-30m</earliest>
    <latest>now</latest>
    <done>
      <set token="shs">$result.host$</set>
    </done>
  </search>
  <search id="baseInt">
    <query>(data.search_props.sid::* component=PerProcess ($shs$) index=_introspection sourcetype=splunk_resource_usage) 
| eval sid='data.search_props.sid', type='data.search_props.type' | fields *</query>
    <earliest>$field1.earliest$</earliest>
    <latest>$field1.latest$</latest>
    <sampleRatio>1</sampleRatio>
  </search>
  <fieldset submitButton="false">
    <input type="time" token="field1">
      <label></label>
      <default>
        <earliest>-1d@d</earliest>
        <latest>@d</latest>
      </default>
    </input>
    <input type="checkbox" token="show_base_searches">
      <label></label>
      <choice value="show_base_searches">Show discovery searches</choice>
      <delimiter> </delimiter>
    </input>
    <input type="time" token="time_tok">
      <label></label>
      <default>
        <earliest>-24h@h</earliest>
        <latest>now</latest>
      </default>
    </input>
  </fieldset>
  <row depends="$show_base_searches$">
    <panel>
      <title>introspection_vcpu_count - $introspection_vcpu_count$</title>
      <input type="dropdown" token="avg_function">
        <label>Calculation for average</label>
        <choice value="avg">mean</choice>
        <choice value="mode">mode</choice>
        <choice value="median">median</choice>
        <choice value="p90">p90</choice>
        <choice value="p95">p95</choice>
        <choice value="p99">p99</choice>
        <default>p99</default>
      </input>
      <table>
        <title>Collects the vCPU count from _introspection</title>
        <search id="introspection_vcpu_count">
          <progress>
            <unset token="introspection_vcpu_count"></unset>
          </progress>
          <done>
            <set token="introspection_vcpu_count">$job.sid$</set>
          </done>
          <query>index=_introspection component=hostwide 
| eval cpu_usage_pct='data.cpu_system_pct'+'data.cpu_user_pct'
| stats 
    values(data.cpu_count) as cpu_count
    values(data.virtual_cpu_count) as vcpu_count
    values(data.splunk_version) as introspection_splunk_version
    values(data.os_version) as introspection_os_version
    $avg_function$(cpu_usage_pct) as avg_cpu_usage_pct
    by host data.instance_guid 
| rename data.instance_guid as guid</query>
          <earliest>$time_tok.earliest$</earliest>
          <latest>$time_tok.latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">1</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
    <panel>
      <title>tcpin_connections $tcpin_connections$</title>
      <table>
        <title>Collects information about components acting as a HWF (can be a CM, LM, SH etc)</title>
        <search>
          <progress>
            <unset token="tcpin_connections"></unset>
          </progress>
          <done>
            <set token="tcpin_connections">$job.sid$</set>
          </done>
          <query>$_internal$ Metrics sourcetype=splunkd TERM(group=tcpin_connections) earliest=-15min latest=now  TERM(fwdType=full)
| stats 
    values(connectionType) as tcp_connectionType
    values(arch) as tcp_arch
    values(version) as tcp_version
    values(fwdType) as tcp_fwdType
    values(os) as tcp_os
    sum(kb) as tcp_sum_kb
    dc(host) as tcp_targets_touched
    by hostname guid
| table *
| rename hostname as host</query>
          <earliest>-15m</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">1</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
    <panel>
      <title>metrics_instance - $metrics_instance$</title>
      <table>
        <title>data mines the component classification, doesn't normally include a HWF</title>
        <search id="metrics_instance">
          <progress>
            <unset token="metrics_instance"></unset>
          </progress>
          <done>
            <set token="metrics_instance">$job.sid$</set>
          </done>
          <query>$_internal$ earliest=-90min latest=now sourcetype=splunkd Metrics TERM(group=instance) TERM(name=instance) (deployment_client OR cluster_search_head OR search_head OR indexer OR cluster_slave OR search_peer OR license_master) NOT(universal_forwarder)
| stats 
    count 
    values(instance_roles) as roles 
    values(index_cluster_label) as idx_cluster_name
    by instance_guid server_name 
| eval mv_roles=split(roles, ", ") 
| eval idx_cluster_name=if(idx_cluster_name="none", "", idx_cluster_name)
| stats 
    count(eval(mv_roles="indexer")) as role_indexer
    count(eval(mv_roles="search_peer")) as role_search_peer
    count(eval(mv_roles="cluster_search_head")) as role_cluster_search_head
    count(eval(mv_roles="search_head")) as role_search_head
    count(eval(mv_roles="cluster_slave")) as role_cluster_slave
    count(eval(mv_roles="kv_store")) as role_kv_store_role 
    count(eval(mv_roles="cluster_master")) as role_cluster_master
    count(eval(mv_roles="license_master")) as role_license_master
    count(eval(mv_roles="deployment_server_master")) as role_deployment_server
    count(eval(mv_roles="deployment_client")) as role_deployment_client
    count(eval(mv_roles="shc_captain")) as role_shc_captain
    count(eval(mv_roles="shc_member")) as role_shc_member
    by instance_guid server_name roles idx_cluster_name
| rename instance_guid as guid 
| rename server_name as host</query>
          <earliest>-4h@m</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">1</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
    <panel>
      <title>license_usage $license_usage$</title>
      <table>
        <title>license_usage $license_usage$</title>
        <search>
          <progress>
            <unset token="license_usage"></unset>
          </progress>
          <done>
            <set token="license_usage">$job.sid$</set>
          </done>
          <query>(index=_internal) sourcetype=splunkd source=*license* TERM(type=RolloverSummary) 
| bin span=1d@d _time
| eval key="license_".licenseGroup."_".productType
| stats values(eval(b/1024/1024/1024)) as gb by key _time slave
| stats p90(gb) as gb by key slave
| eval gb=round(gb,0)
| rename slave as guid
| xyseries guid key gb</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
        </search>
        <option name="count">1</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
    <panel>
      <title>search_concurrency - $search_concurrency$</title>
      <table>
        <title>collects search concurrency information from all reporting components</title>
        <search>
          <progress>
            <unset token="search_concurrency"></unset>
          </progress>
          <done>
            <set token="search_concurrency">$job.sid$</set>
          </done>
          <query>$_internal$ sourcetype=splunkd METRICS TERM(group=search_pool) 
| stats p5(idle) as search_con_idle_p5
    p95(idle) as search_con_idle_p95
    max(active) as search_con_active_max
    p95(active) as search_con_active_p95
    p5(active) as search_con_active_p5
    by host</query>
          <earliest>$time_tok.earliest$</earliest>
          <latest>$time_tok.latest$</latest>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
    <panel>
      <title>search_usage - $search_usage$</title>
      <table>
        <title>collects search execution details</title>
        <search>
          <progress>
            <unset token="search_usage"></unset>
          </progress>
          <done>
            <set token="search_usage">$job.sid$</set>
          </done>
          <query>index=_audit TERM(info=completed) TERM(action=search) NOT(user=splunk-system-user) 
| stats 
    count as search_completed
    dc(user) as search_unique_users 
    avg(total_run_time) as search_avg_run_time 
    p95(total_run_time) as search_p95_run_time 
    stdev(total_run_time) as search_stdev_run_time 
    avg(search_startup_time) as search_avg_startup_time 
    p95(search_startup_time) as search_p95_startup_time 
    stdev(search_startup_time) as search_stdev_startup_time 
    by host</query>
          <earliest>$time_tok.earliest$</earliest>
          <latest>$time_tok.latest$</latest>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Total vCPU billable / non-billable</title>
      <single>
        <search base="classified_hosts">
          <query>| stats sum(eval(if(billable=1,vcpu_count,0))) as total_billable_vcpu 
    sum(eval(if(billable=0,vcpu_count,0))) as total_unbillable_vcpu 
| eval label=total_billable_vcpu."/".total_unbillable_vcpu
| fields label</query>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </single>
    </panel>
    <panel>
      <title>vCPU in active use according to $avg_function$</title>
      <single>
        <search base="summarized_usage">
          <query>| stats sum(vCPU_used)</query>
        </search>
        <option name="drilldown">none</option>
      </single>
    </panel>
    <panel>
      <title>Licences detected</title>
      <table>
        <search>
          <query>(index=_internal) sourcetype=splunkd source=*license* TERM(type=RolloverSummary) 
| bin span=1d@d _time
| eval key="license_".licenseGroup."_".productType
| stats values(eval(b/1024/1024/1024)) as gb by key _time slave
| stats p90(gb) as gb by key slave
| eval gb=round(gb,0)
| rename slave as guid
| xyseries guid key gb</query>
          <earliest>-7d@h</earliest>
          <latest>now</latest>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
    <panel>
      <title>Roles to versions</title>
      <table>
        <search base="classified_hosts">
          <query>| chart limit=0 count as instances by primary_role version</query>
        </search>
        <option name="count">10</option>
        <option name="dataOverlayMode">heatmap</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Billable roles to vCPU count with utilisation measure</title>
      <table>
        <search base="classified_hosts" id="summarized_usage">
          <query>| where billable=1
| eval cpu_used=vcpu_count*(avg_cpu_usage_pct)/100
| stats count as instances 
    sum(vcpu_count) as total_vCPU
    sum(cpu_used) as vCPU_used
    median(avg_cpu_usage_pct) as avg_cpu_usage_pct
    sum(license_*) as lic_*
    avg(search_con_active_p95) as search_con_p95
    by primary_role idx_cluster_name
| table primary_role idx_cluster_name instances total_vCPU avg_cpu_usage_pct search_con_p95 vCPU_used lic_*
| foreach lic_* [| eval &lt;&lt;FIELD&gt;&gt;=round(&lt;&lt;FIELD&gt;&gt;,0) ]</query>
        </search>
        <option name="count">100</option>
        <option name="dataOverlayMode">none</option>
        <option name="refresh.display">progressbar</option>
        <format type="number" field="avg_cpu_usage_pct">
          <option name="precision">0</option>
          <option name="unit">%</option>
        </format>
        <format type="number" field="vCPU_used">
          <option name="precision">0</option>
        </format>
        <format type="color" field="instances">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="number" field="total_vCPU">
          <option name="precision">0</option>
        </format>
        <format type="color" field="total_vCPU">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="avg_cpu_usage_pct">
          <colorPalette type="list">[#65A637,#6DB7C6,#F7BC38,#F58F39,#D93F3C]</colorPalette>
          <scale type="threshold">0,30,70,100</scale>
        </format>
        <format type="color" field="vCPU_used">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="number" field="lic_Enterprise_enterprise">
          <option name="precision">0</option>
        </format>
        <format type="color" field="lic_Enterprise_enterprise">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="number" field="search_con_p95">
          <option name="precision">0</option>
        </format>
        <format type="color" field="search_con_p95">
          <colorPalette type="minMidMax" maxColor="#1E93C6" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>The base report - please export this report for further processing</title>
      <input type="dropdown" token="obstification">
        <label>Obstificate host names?</label>
        <choice value="| eval obstification=&quot;true&quot;, guid=md5(guid), idx_cluster_name=md5(idx_cluster_name),host=md5(host)">Yes</choice>
        <choice value="| noop">No</choice>
        <default>| eval obstification="true", guid=md5(guid), idx_cluster_name=md5(idx_cluster_name),host=md5(host)</default>
      </input>
      <table>
        <search id="classified_hosts">
          <query>| union 
    [| union 
        [| loadjob $metrics_instance$ ] 
        [| loadjob $tcpin_connections$ ] 
        [| loadjob $introspection_vcpu_count$ ] 
        [| loadjob $license_usage$ ] 
    | stats values(*) as * by guid ] 
    [| loadjob $search_concurrency$ ]
    [| loadjob $search_usage$ ]
| stats values(*) as * by host 
| eval primary_role=case(role_indexer=1,"indexer",
    role_cluster_master=1,"cluster_master",
    role_cluster_search_head=1,"search_head_cluster",
    role_search_head=1,"search_head",
    role_license_master=1,"license_master",
    role_deployment_server_master=1,"deployment_server_master",
    tcp_fwdType="full","heavy_forwarder",
    tcp_fwdType="uf","universal_forwarder"
    ) 
| eval billable=case(primary_role="indexer", 1,
    primary_role="cluster_master", 0,
    primary_role="search_head", 1,
    primary_role="search_head_cluster", 1,
    primary_role="heavy_forwarder", 0,
    primary_role="universal_forwarder", 0,
    primary_role="license_master", 0,
    primary_role="deployment_server_master",0
    ) 
| table host guid primary_role idx_cluster_name billable avg_cpu_usage_pct cpu_count vcpu_count introspection_splunk_version tcp_* search* license* 
| eval date_of_generation=now(), date_of_generation_str=strftime(date_of_generation,"%c")
| eval version=coalesce(tcp_version, introspection_splunk_version)
$obstification$
| fillnull idx_cluster_name</query>
          <earliest>$time_tok.earliest$</earliest>
          <latest>$time_tok.latest$</latest>
        </search>
        <option name="count">10</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <format type="color" field="vcpu_count">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="cpu_count">
          <colorPalette type="sharedList"></colorPalette>
          <scale type="sharedCategory"></scale>
        </format>
        <format type="number" field="avg_cpu_usage_pct">
          <option name="precision">0</option>
          <option name="unit">%</option>
        </format>
        <format type="color" field="avg_cpu_usage_pct">
          <colorPalette type="list">[#65A637,#6DB7C6,#F7BC38,#F58F39,#D93F3C]</colorPalette>
          <scale type="threshold">0,30,70,100</scale>
        </format>
        <format type="color" field="usage_Enterprise_enterprise">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="search_con_active_max">
          <colorPalette type="minMidMax" maxColor="#D6563C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="search_con_active_p5">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="search_con_active_p95">
          <colorPalette type="minMidMax" maxColor="#D6563C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="search_con_idle_p5">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="search_con_idle_p95">
          <colorPalette type="minMidMax" maxColor="#31A35F" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h1>Search Concurrency</h1>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Total Searches by Type</title>
      <table>
        <search base="baseInt">
          <query>| stats count by type | sort - count</query>
        </search>
        <option name="refresh.display">progressbar</option>
        <format type="color" field="count">
          <colorPalette type="minMidMax" maxColor="#AF575A" midColor="#FFFFFF" minColor="#62B3B2"></colorPalette>
          <scale type="minMidMax" midType="percentile" midValue="50"></scale>
        </format>
      </table>
    </panel>
    <panel>
      <title>Total Searches</title>
      <single>
        <search base="baseInt">
          <query>| stats count</query>
        </search>
        <option name="drilldown">none</option>
      </single>
    </panel>
    <panel>
      <title>Total searches per day - past 7 days</title>
      <chart>
        <search>
          <query>(data.search_props.sid::* component=PerProcess ($shs$) index=_introspection sourcetype=splunk_resource_usage) 
| eval sid='data.search_props.sid', type='data.search_props.type' | fields * | bucket _time span=day|  timechart count as "Total daily search count"| eventstats avg("Total daily search count") as average | eval average=round(average,0)</query>
          <earliest>-7d@d</earliest>
          <latest>@d</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="charting.axisLabelsX.majorLabelStyle.overflowMode">ellipsisNone</option>
        <option name="charting.axisLabelsX.majorLabelStyle.rotation">0</option>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisTitleY2.visibility">visible</option>
        <option name="charting.axisX.abbreviation">none</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.abbreviation">none</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.axisY2.abbreviation">none</option>
        <option name="charting.axisY2.enabled">0</option>
        <option name="charting.axisY2.scale">inherit</option>
        <option name="charting.chart">column</option>
        <option name="charting.chart.bubbleMaximumSize">50</option>
        <option name="charting.chart.bubbleMinimumSize">10</option>
        <option name="charting.chart.bubbleSizeBy">area</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.overlayFields">average</option>
        <option name="charting.chart.showDataLabels">none</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">default</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">none</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.layout.splitSeries.allowIndependentYRanges">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.mode">standard</option>
        <option name="charting.legend.placement">right</option>
        <option name="charting.lineWidth">2</option>
        <option name="trellis.enabled">0</option>
        <option name="trellis.scales.shared">1</option>
        <option name="trellis.size">medium</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Highest Avg Concurrency in 1m Slice</title>
      <single>
        <search base="baseInt">
          <query>|  stats dc(sid) AS distinct_search_count by _time, type | timechart minspan=10s span=1m Avg(distinct_search_count) AS "Avg Concurrency" | sort - "Avg Concurrency" | head 1 | fields "Avg Concurrency"</query>
        </search>
        <option name="drilldown">none</option>
      </single>
    </panel>
    <panel>
      <title>Highest Max Concurrency in 1m Slice</title>
      <single>
        <search base="baseInt">
          <query>|  stats dc(sid) AS distinct_search_count by _time, type | timechart minspan=10s span=1m max(distinct_search_count) as "Max Concurrency" | sort - "Max Concurrency" | head 1 | fields "Max Concurrency"</query>
        </search>
        <option name="drilldown">none</option>
      </single>
    </panel>
    <panel>
      <title>Search Concurrency Over Time</title>
      <chart>
        <search base="baseInt">
          <query> | stats dc(sid) AS distinct_search_count by _time, type 
| timechart minspan=10s span=1m Avg(distinct_search_count) AS "Avg Concurrency" max(distinct_search_count) as "Max Concurrency" by type</query>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.chart.overlayFields">"Avg Concurrency: ad-hoc","Avg Concurrency: datamodel acceleration","Avg Concurrency: other","Avg Concurrency: report acceleration","Avg Concurrency: scheduled"</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
</form>
